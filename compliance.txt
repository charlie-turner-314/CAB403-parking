[1msrc/firealarm.c:171:27: [31mstyle:[39m Required A string literal shall not be assigned to an object unless the object‚Äôs type is ‚Äúpointer to const-qualified char‚Äù. [misra-c2012-7.4][0m
      char *evacmessage = "EVACUATE ";
                          ^
[1msrc/firealarm.c:142:9: [31mstyle:[39m Required Function types shall be in prototype form with named parameters. [misra-c2012-8.2][0m
int main() {
        ^
[1msrc/firealarm.c:24:6: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void elementSwap(int *element1, int *element2) {
     ^
[1msrc/firealarm.c:33:6: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void arrSort(int arr[], int arrLen) {
     ^
[1msrc/firealarm.c:43:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int median_calc(int level) {
    ^
[1msrc/firealarm.c:68:6: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void smoothedTemp_handler(int level) {
     ^
[1msrc/firealarm.c:79:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void *temp_monitor(void *arg) {
      ^
[1msrc/firealarm.c:133:6: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void openboomgate(int level) {
     ^
[1msrc/firealarm.c:14:22: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
struct SharedMemory *shm;
                     ^
[1msrc/firealarm.c:16:17: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_mutex_t alarm_mutex = PTHREAD_MUTEX_INITIALIZER;
                ^
[1msrc/firealarm.c:17:16: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_cond_t alarm_condvar = PTHREAD_COND_INITIALIZER;
               ^
[1msrc/firealarm.c:19:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int alarm_active = 0;
    ^
[1msrc/firealarm.c:20:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int temps[NUM_LEVELS][5];           // 2D array to calc median value
    ^
[1msrc/firealarm.c:21:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int smoothed_temps[NUM_LEVELS][30]; // 2D array to store smoothed median values
    ^
[1msrc/firealarm.c:47:13: [31mstyle:[39m Required Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category. [misra-c2012-10.4][0m
          4 * sizeof(temps[level][0])); // shift temps up in array
            ^
[1msrc/firealarm.c:73:16: [31mstyle:[39m Required Both operands of an operator in which the usual arithmetic conversions are performed shall have the same essential type category. [misra-c2012-10.4][0m
            29 * sizeof(int));          // shift temps up in array
               ^
[1msrc/firealarm.c:87:21: [31mstyle:[39m Required A cast shall not be performed between pointer to void and an arithmetic type. [misra-c2012-11.6][0m
  size_t level_id = (size_t)arg;
                    ^
[1msrc/firealarm.c:150:59: [31mstyle:[39m Required A cast shall not be performed between pointer to void and an arithmetic type. [misra-c2012-11.6][0m
    pthread_create(&level_threads[i], NULL, temp_monitor, (void *)i);
                                                          ^
[1msrc/firealarm.c:34:21: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  for (int i = 0; i < arrLen - 1; i++) {
                    ^
[1msrc/firealarm.c:35:23: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    for (int j = 0; j < arrLen - i - 1; j++) {
                      ^
[1msrc/firealarm.c:108:20: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    if ((hightemps >= 30 * 0.9) && emptyReadings == 0) {
                   ^
[1msrc/firealarm.c:110:70: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    } else if ((smoothed_temps[level][29] - smoothed_temps[level][0] >= 8) && (emptyReadings == 0)){
                                                                     ^
[1msrc/firealarm.c:54:7: [31mstyle:[39m Advisory A function should have a single point of exit at the end [misra-c2012-15.5][0m
      return -1;
      ^
[1msrc/firealarm.c:36:7: [31mstyle:[39m Required The body of an iteration-statement or a selection-statement shall be a compound-statement [misra-c2012-15.6][0m
      if (arr[j] > arr[j + 1])
      ^
[1msrc/firealarm.c:104:7: [31mstyle:[39m Required All if ‚Ä¶ else if constructs shall be terminated with an else statement [misra-c2012-15.7][0m
      }
      ^
[1msrc/firealarm.c:46:10: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  memmove(&temps[level][0], &temps[level][1],
         ^
[1msrc/firealarm.c:60:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  memcpy(tempsCopy, temps[level],
        ^
[1msrc/firealarm.c:72:12: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
    memmove(&smoothed_temps[level][0], &smoothed_temps[level][1],
           ^
[1msrc/firealarm.c:89:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Monitoring temperature on level %d\n", (level+1));
        ^
[1msrc/firealarm.c:143:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Firealarm System Running\n");
        ^
[1msrc/firealarm.c:144:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  fflush(stdout);
        ^
[1msrc/firealarm.c:158:16: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        fprintf(stderr, "*** ALARM ACTIVE ***\n");
               ^
[1msrc/firealarm.c:182:16: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        fprintf(stderr, "*** ALARM DEACTIVATED ***\n");
               ^
[1msrc/firealarm.c:147:13: [31mstyle:[39m Required Variable-length array types shall not be used [misra-c2012-18.8][0m
  pthread_t level_threads[NUM_LEVELS];
            ^
[1msrc/firealarm.c:6:0: [31mstyle:[39m Required The Standard Library input/output functions shall not be used [misra-c2012-21.6][0m
#include <stdio.h>
^
[1msrc/firealarm.c:198:11: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
      exit(EXIT_FAILURE);
          ^
[1msrc/firealarm.c:11:0: [31mstyle:[39m Required The Standard Library time and date functions shall not be used [misra-c2012-21.10][0m
#include <time.h>
^
[1msrc/manager.c:505:26: [31mstyle:[39m Required A string literal shall not be assigned to an object unless the object‚Äôs type is ‚Äúpointer to const-qualified char‚Äù. [misra-c2012-7.4][0m
  cars_ht = ht_from_file("plates.txt");
                         ^
[1msrc/manager.c:231:20: [31mstyle:[39m Required Function types shall be in prototype form with named parameters. [misra-c2012-8.2][0m
int alarm_is_active() {
                   ^
[1msrc/manager.c:472:20: [31mstyle:[39m Required Function types shall be in prototype form with named parameters. [misra-c2012-8.2][0m
void *input_handler() {
                   ^
[1msrc/manager.c:85:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int ts_cars_on_level(int l) {
    ^
[1msrc/manager.c:99:6: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int *get_available_levels(int *levels) {
     ^
[1msrc/manager.c:116:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int ts_add_cars_to_level(int l, int num_cars) {
    ^
[1msrc/manager.c:141:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int ts_get_number_plate(char *plate) {
    ^
[1msrc/manager.c:158:6: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
bool ts_set_assigned_level(char *plate, int level) {
     ^
[1msrc/manager.c:177:6: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
bool ts_set_current_level(char *plate, int level) {
     ^
[1msrc/manager.c:195:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
ht_t *ht_from_file(char *filename) {
      ^
[1msrc/manager.c:221:6: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void wait_for_lpr(struct LPR *lpr) {
     ^
[1msrc/manager.c:231:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int alarm_is_active() {
    ^
[1msrc/manager.c:240:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void *entry_handler(void *arg) {
      ^
[1msrc/manager.c:347:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void *level_handler(void *arg) {
      ^
[1msrc/manager.c:408:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void *exit_handler(void *arg) {
      ^
[1msrc/manager.c:472:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
void *input_handler() {
      ^
[1msrc/manager.c:53:17: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_mutex_t rand_mutex; // mutex for rand() function
                ^
[1msrc/manager.c:54:17: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_mutex_t cars_mutex; // mutex for hashtable of vehicles
                ^
[1msrc/manager.c:55:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
ht_t *cars_ht; // hashtable of vehicles and their current and assigned level
      ^
[1msrc/manager.c:57:17: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_mutex_t capacity_mutex; // mutex for capacity of each level
                ^
[1msrc/manager.c:58:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
ht_t *capacity_ht;              // hashtable of levels and their capacity
      ^
[1msrc/manager.c:61:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
ht_t *billing_ht;
      ^
[1msrc/manager.c:62:17: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_mutex_t billing_mutex = PTHREAD_MUTEX_INITIALIZER;
                ^
[1msrc/manager.c:63:7: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
float total_bill = 0;
      ^
[1msrc/manager.c:68:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int run = 1;
    ^
[1msrc/manager.c:70:22: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
struct SharedMemory *shm; // shared memory
                     ^
[1msrc/manager.c:170:19: [31mstyle:[39m Required Operands shall not be of an inappropriate essential type. [misra-c2012-10.1][0m
  int new_value = SET_ASSIGNED_LEVEL(*current_value, level);
                  ^
[1msrc/manager.c:269:9: [31mstyle:[39m Required Operands shall not be of an inappropriate essential type. [misra-c2012-10.1][0m
    if (GET_ASSIGNED_LEVEL(value) == NO_LEVEL &&
        ^
[1msrc/manager.c:361:20: [31mstyle:[39m Required Operands shall not be of an inappropriate essential type. [misra-c2012-10.1][0m
    int assigned = GET_ASSIGNED_LEVEL(value);
                   ^
[1msrc/manager.c:63:18: [31mstyle:[39m Required The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category. [misra-c2012-10.3][0m
float total_bill = 0;
                 ^
[1msrc/manager.c:442:18: [31mstyle:[39m Required The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category. [misra-c2012-10.3][0m
      float bill = time_in_carpark * COST_PER_MS / TIME_FACTOR;
                 ^
[1msrc/manager.c:241:28: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
  struct EntryArgs *args = (struct EntryArgs *)arg;
                           ^
[1msrc/manager.c:244:25: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
  int *available_levels = calloc(NUM_LEVELS + 1, sizeof(int));
                        ^
[1msrc/manager.c:348:14: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
  int *lid = (int *)arg;
             ^
[1msrc/manager.c:409:27: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
  struct ExitArgs *args = (struct ExitArgs *)arg;
                          ^
[1msrc/manager.c:523:28: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
    struct EntryArgs *args = calloc(1, sizeof(struct EntryArgs));
                           ^
[1msrc/manager.c:540:28: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
    struct LevelArgs *args = calloc(1, sizeof(struct LevelArgs));
                           ^
[1msrc/manager.c:557:27: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
    struct ExitArgs *args = calloc(1, sizeof(struct ExitArgs));
                          ^
[1msrc/manager.c:505:25: [31mstyle:[39m Required A cast shall not remove any const or volatile qualification from the type pointed to by a pointer. [misra-c2012-11.8][0m
  cars_ht = ht_from_file("plates.txt");
                        ^
[1msrc/manager.c:134:19: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  cars = cars > 0 ? cars : 0;
                  ^
[1msrc/manager.c:224:32: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  while (lpr->plate[0] == '\0' && run) { // while the lpr is empty
                               ^
[1msrc/manager.c:269:47: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    if (GET_ASSIGNED_LEVEL(value) == NO_LEVEL &&
                                              ^
[1msrc/manager.c:278:66: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
        int available_level_index = rand() % available_levels[0] + 1;
                                                                 ^
[1msrc/manager.c:298:16: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    if ((level && level >= '0' && level <= '9')) {
               ^
[1msrc/manager.c:315:41: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
          (long long)(tv.tv_sec) * 1000 +
                                        ^
[1msrc/manager.c:438:41: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
          (long long)(tv.tv_sec) * 1000 +
                                        ^
[1msrc/manager.c:571:16: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  if (argc < 2 || strcmp(argv[1], "nodisp") != 0) {
               ^
[1msrc/manager.c:593:18: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    } else if (i < NUM_ENTRANCES + NUM_LEVELS) {
                 ^
[1msrc/manager.c:475:22: [31mstyle:[39m Advisory The comma operator should not be used [misra-c2012-12.3][0m
  struct termios oldt, newt;
                     ^
[1msrc/manager.c:170:19: [31mstyle:[39m Advisory The result of an assignment operator should not be used [misra-c2012-13.4][0m
  int new_value = SET_ASSIGNED_LEVEL(*current_value, level);
                  ^
[1msrc/manager.c:188:19: [31mstyle:[39m Advisory The result of an assignment operator should not be used [misra-c2012-13.4][0m
  int new_value = SET_CURRENT_LEVEL(*current_value, level);
                  ^
[1msrc/manager.c:210:19: [31mstyle:[39m Advisory The result of an assignment operator should not be used [misra-c2012-13.4][0m
  while ((linelen = getline(&line, &linecap, fp)) > 0) {
                  ^
[1msrc/manager.c:233:8: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
    if (shm->levels[i].alarm) {
       ^
[1msrc/manager.c:249:9: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
  while (run) {
        ^
[1msrc/manager.c:258:8: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
    if (alarm_is_active()) {
       ^
[1msrc/manager.c:291:8: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
    if (level) { // don't touch the level if we are evacuating
       ^
[1msrc/manager.c:352:9: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
  while (run) {
        ^
[1msrc/manager.c:412:9: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
  while (run) {
        ^
[1msrc/manager.c:118:5: [31mstyle:[39m Advisory A function should have a single point of exit at the end [misra-c2012-15.5][0m
    return 0;
    ^
[1msrc/manager.c:127:5: [31mstyle:[39m Advisory A function should have a single point of exit at the end [misra-c2012-15.5][0m
    return 0;
    ^
[1msrc/manager.c:152:5: [31mstyle:[39m Advisory A function should have a single point of exit at the end [misra-c2012-15.5][0m
    return -1;
    ^
[1msrc/manager.c:168:5: [31mstyle:[39m Advisory A function should have a single point of exit at the end [misra-c2012-15.5][0m
    return false;
    ^
[1msrc/manager.c:187:5: [31mstyle:[39m Advisory A function should have a single point of exit at the end [misra-c2012-15.5][0m
    return false;
    ^
[1msrc/manager.c:200:5: [31mstyle:[39m Advisory A function should have a single point of exit at the end [misra-c2012-15.5][0m
    return NULL;
    ^
[1msrc/manager.c:234:7: [31mstyle:[39m Advisory A function should have a single point of exit at the end [misra-c2012-15.5][0m
      return 1;
      ^
[1msrc/manager.c:117:3: [31mstyle:[39m Required The body of an iteration-statement or a selection-statement shall be a compound-statement [misra-c2012-15.6][0m
  if (l == NO_LEVEL)
  ^
[1msrc/manager.c:186:3: [31mstyle:[39m Required The body of an iteration-statement or a selection-statement shall be a compound-statement [misra-c2012-15.6][0m
  if (!current_value)
  ^
[1msrc/manager.c:252:5: [31mstyle:[39m Required The body of an iteration-statement or a selection-statement shall be a compound-statement [misra-c2012-15.6][0m
    if (!run)
    ^
[1msrc/manager.c:355:5: [31mstyle:[39m Required The body of an iteration-statement or a selection-statement shall be a compound-statement [misra-c2012-15.6][0m
    if (!run)
    ^
[1msrc/manager.c:415:5: [31mstyle:[39m Required The body of an iteration-statement or a selection-statement shall be a compound-statement [misra-c2012-15.6][0m
    if (!run)
    ^
[1msrc/manager.c:145:10: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  strncpy(null_terminated_plate, plate, 7);
         ^
[1msrc/manager.c:161:10: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  strncpy(null_terminated_plate, plate, 7);
         ^
[1msrc/manager.c:180:10: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  strncpy(null_terminated_plate, plate, 7);
         ^
[1msrc/manager.c:196:7: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  puts(filename);
      ^
[1msrc/manager.c:261:13: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      memset(entrance->lpr.plate, '\0', 6);
            ^
[1msrc/manager.c:299:28: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      ts_set_assigned_level(plate, CHAR_TO_INT(level) - 1);
                           ^
[1msrc/manager.c:300:27: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      ts_set_current_level(plate, NO_LEVEL);
                          ^
[1msrc/manager.c:313:19: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      gettimeofday(&tv, NULL);
                  ^
[1msrc/manager.c:338:11: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
    memset(entrance->lpr.plate, '\0', 6);
          ^
[1msrc/manager.c:343:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Entry Stop %d\n", id);
        ^
[1msrc/manager.c:368:29: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        ts_set_current_level(plate, NO_LEVEL);
                            ^
[1msrc/manager.c:370:29: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        ts_add_cars_to_level(level_id, -1);
                            ^
[1msrc/manager.c:374:15: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        printf("Car %.6s teleported to different level, current: %d, "
              ^
[1msrc/manager.c:384:29: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        ts_add_cars_to_level(assigned, -1);
                            ^
[1msrc/manager.c:385:29: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        ts_add_cars_to_level(level_id, 1);
                            ^
[1msrc/manager.c:386:29: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        ts_set_current_level(plate, level_id);
                            ^
[1msrc/manager.c:389:15: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
        printf("Car trying to enter full level\n");
              ^
[1msrc/manager.c:394:27: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      ts_add_cars_to_level(level_id, 1);
                          ^
[1msrc/manager.c:396:27: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      ts_set_current_level(plate, level_id);
                          ^
[1msrc/manager.c:401:11: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
    memset(level->lpr.plate, '\0', 6);
          ^
[1msrc/manager.c:433:13: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      printf("Car %.6s not found in billing table\n", plate);
            ^
[1msrc/manager.c:436:19: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      gettimeofday(&tv, NULL);
                  ^
[1msrc/manager.c:444:14: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      fprintf(billing_file, "%s $%.2f \n", exitplate, bill);
             ^
[1msrc/manager.c:445:13: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
      fclose(billing_file);
            ^
[1msrc/manager.c:450:26: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
    ts_set_assigned_level(plate, NO_LEVEL);
                         ^
[1msrc/manager.c:451:25: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
    ts_set_current_level(plate, NO_LEVEL);
                        ^
[1msrc/manager.c:465:11: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
    memset(exit->lpr.plate, '\0', 6);
          ^
[1msrc/manager.c:481:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  system("stty -echo");
        ^
[1msrc/manager.c:488:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  system("stty echo");
        ^
[1msrc/manager.c:39:0: [31mstyle:[39m Required Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses [misra-c2012-20.7][0m
#define GET_ASSIGNED_LEVEL(x) (x >> 4)
^
[1msrc/manager.c:40:0: [31mstyle:[39m Required Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses [misra-c2012-20.7][0m
#define GET_CURRENT_LEVEL(x) (x & 0x0F)
^
[1msrc/manager.c:41:0: [31mstyle:[39m Required Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses [misra-c2012-20.7][0m
#define SET_ASSIGNED_LEVEL(x, y) (x = (x & 0x0F) | (y << 4))
^
[1msrc/manager.c:42:0: [31mstyle:[39m Required Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses [misra-c2012-20.7][0m
#define SET_CURRENT_LEVEL(x, y) (x = (x & 0xF0) | y)
^
[1msrc/manager.c:46:0: [31mstyle:[39m Required Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses [misra-c2012-20.7][0m
#define CHAR_TO_INT(c) (c - '0')
^
[1msrc/manager.c:47:0: [31mstyle:[39m Required Expressions resulting from the expansion of macro parameters shall be enclosed in parentheses [misra-c2012-20.7][0m
#define INT_TO_CHAR(i) (i + '0')
^
[1msrc/manager.c:216:7: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
  free(line);
      ^
[1msrc/manager.c:244:33: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
  int *available_levels = calloc(NUM_LEVELS + 1, sizeof(int));
                                ^
[1msrc/manager.c:342:7: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
  free(available_levels); // get rid of the levels array
      ^
[1msrc/manager.c:523:36: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    struct EntryArgs *args = calloc(1, sizeof(struct EntryArgs));
                                   ^
[1msrc/manager.c:540:36: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    struct LevelArgs *args = calloc(1, sizeof(struct LevelArgs));
                                   ^
[1msrc/manager.c:557:35: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    struct ExitArgs *args = calloc(1, sizeof(struct ExitArgs));
                                  ^
[1msrc/manager.c:609:9: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    free(entry_args[i]);
        ^
[1msrc/manager.c:614:9: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    free(level_args[i]);
        ^
[1msrc/manager.c:618:9: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    free(exit_args[i]);
        ^
[1msrc/manager.c:7:0: [31mstyle:[39m Required The Standard Library input/output functions shall not be used [misra-c2012-21.6][0m
#include <stdio.h>
^
[1msrc/manager.c:102:9: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
    exit(EXIT_FAILURE);
        ^
[1msrc/manager.c:247:9: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
    exit(EXIT_FAILURE);
        ^
[1msrc/manager.c:377:13: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
        exit(EXIT_FAILURE);
            ^
[1msrc/manager.c:526:11: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
      exit(EXIT_FAILURE);
          ^
[1msrc/manager.c:543:11: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
      exit(EXIT_FAILURE);
          ^
[1msrc/manager.c:560:11: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
      exit(EXIT_FAILURE);
          ^
[1msrc/manager.c:11:0: [31mstyle:[39m Required The Standard Library time and date functions shall not be used [misra-c2012-21.10][0m
#include <time.h>
^
[1msrc/manager.c:481:3: [31mstyle:[39m misra violation 2121 with no text in the supplied rule-texts-file [misra-c2012-21.21][0m
  system("stty -echo");
  ^
[1msrc/manager.c:488:3: [31mstyle:[39m misra violation 2121 with no text in the supplied rule-texts-file [misra-c2012-21.21][0m
  system("stty echo");
  ^
[1msrc/simulator.c:401:10: [31mstyle:[39m Required Octal and hexadecimal escape sequences shall be terminated. [misra-c2012-4.1][0m
  printf("\033[2J\033[1;1H");
         ^
[1msrc/simulator.h:117:20: [31mstyle:[39m Required Function types shall be in prototype form with named parameters. [misra-c2012-8.2][0m
void *input_handler();
                   ^
[1msrc/simulator.c:17:17: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_mutex_t rand_mutex = PTHREAD_MUTEX_INITIALIZER; // mutex for random
                ^
[1msrc/simulator.c:18:14: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
volatile int run = 1; // Whether the program should continue running
             ^
[1msrc/simulator.c:20:14: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
volatile int fire = FIRE_OFF; // Whether the fire alarm has been triggered
             ^
[1msrc/simulator.c:22:5: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
int used_threads = 0; // number of car threads currently running for debug
    ^
[1msrc/simulator.c:23:17: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_mutex_t used_threads_mutex; // mutex for used_threads
                ^
[1msrc/simulator.c:25:15: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
NumberPlates *plates; // Linked list of number plates
              ^
[1msrc/simulator.c:26:17: [31mstyle:[39m Required A compatible declaration shall be visible when an object or function with external linkage is defined. [misra-c2012-8.4][0m
pthread_mutex_t plate_mutex = PTHREAD_MUTEX_INITIALIZER; // mutex for plate
                ^
[1msrc/simulator.c:71:14: [31mstyle:[39m Required The value of an expression shall not be assigned to an object with a narrower essential type or of a different essential type category. [misra-c2012-10.3][0m
    level_id = display - '1';            // convert to level index
             ^
[1msrc/simulator.c:71:14: [31mstyle:[39m Required The value of a composite expression shall not be assigned to an object with wider essential type. [misra-c2012-10.6][0m
    level_id = display - '1';            // convert to level index
             ^
[1msrc/simulator.c:192:30: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
  struct SharedMemory *shm = (struct SharedMemory *)arg;
                             ^
[1msrc/simulator.c:238:27: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
  struct Boomgate *gate = (struct Boomgate *)arg;
                          ^
[1msrc/simulator.c:364:21: [31mstyle:[39m Advisory A conversion should not be performed from pointer to void into pointer to object. [misra-c2012-11.5][0m
      ct_data *data = calloc(1, sizeof(ct_data));
                    ^
[1msrc/simulator.c:70:21: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  if (display > '0' && display <= '9') { // level number
                    ^
[1msrc/simulator.c:118:29: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    while (car_item == NULL && run) {
                            ^
[1msrc/simulator.c:202:38: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
        fixedTempChange = rand() % 8 + 25;
                                     ^
[1msrc/simulator.c:208:38: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
        fixedTempChange = rand() % 8 + 60;
                                     ^
[1msrc/simulator.c:218:39: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
          randTempChange = rand() % 4 - 1;
                                      ^
[1msrc/simulator.c:229:42: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
      shm->levels[i].temp = newTemp < 99 ? newTemp : 99;
                                         ^
[1msrc/simulator.c:239:14: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  while (run || used_threads > 0) {
             ^
[1msrc/simulator.c:241:34: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    while (!(gate->status == 'R' || gate->status == 'L') &&
                                 ^
[1msrc/simulator.c:242:30: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
           (used_threads > 0 || run)) {
                             ^
[1msrc/simulator.c:246:27: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
    if (used_threads == 0 && !run) {
                          ^
[1msrc/simulator.c:326:16: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  if (argc < 2 || strcmp(argv[1], "nodisp") != 0) {
               ^
[1msrc/simulator.c:340:21: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  for (int i = 0; i < NUM_ENTRANCES + NUM_EXITS; i++) {
                    ^
[1msrc/simulator.c:405:21: [31mstyle:[39m Advisory The precedence of operators within expressions should be made explicit. [misra-c2012-12.1][0m
  for (int i = 0; i < NUM_ENTRANCES + NUM_EXITS; i++) {
                    ^
[1msrc/simulator.c:270:22: [31mstyle:[39m Advisory The comma operator should not be used [misra-c2012-12.3][0m
  struct termios oldt, newt;
                     ^
[1msrc/simulator.c:114:9: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
  while (run) {
        ^
[1msrc/simulator.c:196:9: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
  while (run) {
        ^
[1msrc/simulator.c:360:9: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
  while (run) {
        ^
[1msrc/simulator.c:362:8: [31mstyle:[39m Required The controlling expression of an if statement and the controlling expression of an iteration-statement shall have essentially Boolean type [misra-c2012-14.4][0m
    if (plate) {
       ^
[1msrc/simulator.c:221:7: [31mstyle:[39m Required All if ‚Ä¶ else if constructs shall be terminated with an else statement [misra-c2012-15.7][0m
      }
      ^
[1msrc/simulator.c:260:5: [31mstyle:[39m Required All if ‚Ä¶ else if constructs shall be terminated with an else statement [misra-c2012-15.7][0m
    }
    ^
[1msrc/simulator.c:286:5: [31mstyle:[39m Required All if ‚Ä¶ else if constructs shall be terminated with an else statement [misra-c2012-15.7][0m
    }
    ^
[1msrc/simulator.c:276:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  system("stty -echo");
        ^
[1msrc/simulator.c:290:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  system("stty echo");
        ^
[1msrc/simulator.c:311:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Loaded %zu plates\n", plates->count);
        ^
[1msrc/simulator.c:327:11: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
    printf("Starting Sim Display\n");
          ^
[1msrc/simulator.c:389:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Attempting To Join Car Threads\n");
        ^
[1msrc/simulator.c:401:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("\033[2J\033[1;1H");
        ^
[1msrc/simulator.c:402:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Car Threads Joined, Used Threads = %d\n", used_threads);
        ^
[1msrc/simulator.c:418:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Input Thread Joined\n");
        ^
[1msrc/simulator.c:420:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Display Thread Joined\n");
        ^
[1msrc/simulator.c:422:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Temperature Thread Joined\n");
        ^
[1msrc/simulator.c:432:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Plates Destroyed\n");
        ^
[1msrc/simulator.c:442:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Gate Threads Joined\n");
        ^
[1msrc/simulator.c:453:9: [31mstyle:[39m Required The value returned by a function having non-void return type shall be used [misra-c2012-17.7][0m
  printf("Entry Queue Destroyed\n");
        ^
[1msrc/simulator.c:159:11: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
      free(data);
          ^
[1msrc/simulator.c:160:11: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
      free(car_item);
          ^
[1msrc/simulator.c:180:9: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    free(data);
        ^
[1msrc/simulator.c:181:9: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    free(car_item);
        ^
[1msrc/simulator.c:364:29: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
      ct_data *data = calloc(1, sizeof(ct_data));
                            ^
[1msrc/simulator.c:379:11: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
      free(data);
          ^
[1msrc/simulator.c:381:9: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    free(plate); // we don't need the plate anymore
        ^
[1msrc/simulator.c:428:9: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
    free(plate);
        ^
[1msrc/simulator.c:431:7: [31mstyle:[39m Required The memory allocation and deallocation functions of <stdlib.h> shall not be used [misra-c2012-21.3][0m
  free(plates);
      ^
[1msrc/simulator.c:8:0: [31mstyle:[39m Required The Standard Library input/output functions shall not be used [misra-c2012-21.6][0m
#include <stdio.h>
^
[1msrc/simulator.c:149:11: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
      exit(EXIT_FAILURE);
          ^
[1msrc/simulator.c:367:13: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
        exit(EXIT_FAILURE);
            ^
[1msrc/simulator.c:398:11: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
      exit(EXIT_FAILURE);
          ^
[1msrc/simulator.c:439:11: [31mstyle:[39m Required The Standard Library functions abort, exit, getenv and system of [misra-c2012-21.8][0m
      exit(EXIT_FAILURE);
          ^
[1msrc/simulator.c:12:0: [31mstyle:[39m Required The Standard Library time and date functions shall not be used [misra-c2012-21.10][0m
#include <time.h>
^
[1msrc/simulator.c:276:3: [31mstyle:[39m misra violation 2121 with no text in the supplied rule-texts-file [misra-c2012-21.21][0m
  system("stty -echo");
  ^
[1msrc/simulator.c:290:3: [31mstyle:[39m misra violation 2121 with no text in the supplied rule-texts-file [misra-c2012-21.21][0m
  system("stty echo");
  ^
[1msrc/manager.c:70:22: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
struct SharedMemory *shm; // shared memory
                     ^
[1msrc/firealarm.c:14:22: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
struct SharedMemory *shm;
                     ^
[1msrc/manager.c:494:5: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
int main(int argc, char *argv[]) {
    ^
[1msrc/firealarm.c:142:5: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
int main() {
    ^
[1msrc/simulator.c:17:17: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
pthread_mutex_t rand_mutex = PTHREAD_MUTEX_INITIALIZER; // mutex for random
                ^
[1msrc/manager.c:53:17: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
pthread_mutex_t rand_mutex; // mutex for rand() function
                ^
[1msrc/simulator.c:18:14: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
volatile int run = 1; // Whether the program should continue running
             ^
[1msrc/manager.c:68:5: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
int run = 1;
    ^
[1msrc/simulator.c:267:7: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
void *input_handler() {
      ^
[1msrc/manager.c:472:7: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
void *input_handler() {
      ^
[1msrc/simulator.c:296:5: [31mstyle:[39m Required An identifier with external linkage shall have exactly one external definition. [misra-c2012-8.6][0m
int main(int argc, char *argv[]) {
    ^
[1msrc/simulator.h:20:24: [31mstyle:[39m Required Identifiers that define objects or functions with external linkage shall be unique. [misra-c2012-5.8][0m
  struct SharedMemory *shm; // pointer to the shared memory
                       ^
[1msrc/manager.c:70:22: [31mstyle:[39m Required Identifiers that define objects or functions with external linkage shall be unique. [misra-c2012-5.8][0m
struct SharedMemory *shm; // shared memory
                     ^
[1msrc/firealarm.c:16:17: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
pthread_mutex_t alarm_mutex = PTHREAD_MUTEX_INITIALIZER;
                ^
[1msrc/firealarm.c:17:16: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
pthread_cond_t alarm_condvar = PTHREAD_COND_INITIALIZER;
               ^
[1msrc/firealarm.c:24:6: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void elementSwap(int *element1, int *element2) {
     ^
[1msrc/firealarm.c:33:6: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void arrSort(int arr[], int arrLen) {
     ^
[1msrc/firealarm.c:43:5: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
int median_calc(int level) {
    ^
[1msrc/firealarm.c:68:6: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void smoothedTemp_handler(int level) {
     ^
[1msrc/firealarm.c:79:7: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void *temp_monitor(void *arg) {
      ^
[1msrc/firealarm.c:133:6: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void openboomgate(int level) {
     ^
[1msrc/manager.c:99:6: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
int *get_available_levels(int *levels) {
     ^
[1msrc/manager.c:195:7: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
ht_t *ht_from_file(char *filename) {
      ^
[1msrc/manager.c:240:7: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void *entry_handler(void *arg) {
      ^
[1msrc/manager.c:347:7: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void *level_handler(void *arg) {
      ^
[1msrc/manager.c:408:7: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void *exit_handler(void *arg) {
      ^
[1msrc/simulator.c:53:5: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
int attempt_entry(ct_data *car_data) {
    ^
[1msrc/simulator.c:85:6: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void park_car(ct_data *car_data, int level_id) {
     ^
[1msrc/simulator.c:95:6: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void exit_car(ct_data *car_data, int level_id) {
     ^
[1msrc/simulator.c:112:7: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void *car_handler(void *arg) {
      ^
[1msrc/simulator.c:191:7: [31mstyle:[39m Advisory  [misra-c2012-8.7][0m
void *temp_simulator(void *arg) {
      ^
